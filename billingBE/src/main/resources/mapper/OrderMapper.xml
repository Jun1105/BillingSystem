<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jun.billing.dao.OrderMapper">
    <resultMap id="orderMap" type="com.jun.billing.entity.pojo.Order">
        <id column="order_id" jdbcType="INTEGER" property="orderId" />
        <result column="user_id" jdbcType="INTEGER" property="userId" />
        <result column="type_id" jdbcType="INTEGER" property="typeId" />
        <result column="description" jdbcType="VARCHAR" property="description" />
        <result column="amount" jdbcType="DECIMAL" property="amount" />
        <result column="date" jdbcType="DATE" property="date" />
        <result column="type_name" jdbcType="VARCHAR" property="typeName" />
    </resultMap>
    <select id="getUserAllOrder" resultMap="orderMap" parameterType="com.jun.billing.entity.vo.OrderRequest">
        SELECT
            uorder.id order_id,
            uorder.user_id,
            uorder.type_id,
            uorder.description,
            uorder.amount,
            uorder.date,
            `type`.NAME type_name
        FROM
            user_order AS uorder
                LEFT JOIN type ON uorder.type_id = `type`.id
        WHERE 1=1
        <if test="req.userId !=null and req.userId !=''">
            and uorder.user_id = #{req.userId}
        </if>
        <if test="req.typeId !=null and req.typeId !=''">
            and uorder.type_id = #{req.typeId}
        </if>
        <if test="req.description !=null and req.description !=''">
            and uorder.description like concat('%',#{req.description,jdbcType=VARCHAR},'%')
        </if>
        <if test="req.minAmount !=null and req.minAmount !=''">
            and uorder.amount &gt;= #{req.minAmount}
        </if>
        <if test="req.maxAmount !=null and req.maxAmount !=null">
            and uorder.amount &lt;= #{req.maxAmount}
        </if>
        <if test="req.dateFm !=null and req.dateTo !=null">
            and uorder.date between #{req.dateFm} and #{req.dateTo}
        </if>
        ORDER BY  ${req.orderBy}
        <choose>
            <when test="req.sort == true">
                  asc
            </when>
            <when test="req.sort == false">
               desc
            </when>
        </choose>
            LIMIT #{req.page},#{req.size}
    </select>
    <insert id="insertOrder" parameterType="com.jun.billing.entity.pojo.Order" useGeneratedKeys="true" keyProperty="orderId">
        insert into user_order(user_id, type_id, description, amount, `date`)
        values (
                #{req.userId},
                #{req.typeId},
                #{req.description},
                #{req.amount},
                #{req.date}
               )
    </insert>
    <update id="updateOrder" parameterType="com.jun.billing.entity.pojo.Order">
        update user_order
        set
            type_id = #{req.typeId},
            description = #{req.description},
            amount = #{req.amount},
            `date` = #{req.date}
        where
            user_id = #{req.userId}
            and id = #{req.orderId}
    </update>
    <delete id="deleteOrder" parameterType="java.lang.Integer">
        delete from user_order where id = #{orderId}
    </delete>

    <select id="getOrderCount" parameterType="com.jun.billing.entity.vo.OrderCountRequest" resultType="com.jun.billing.entity.pojo.OrderCount">
        select
            `date`, sum(amount) totalAmount
        from user_order
        where user_id = #{req.userId} and  `date` &gt;= #{req.startDate} and `date` &lt;= #{req.endDate}
        GROUP BY
            `date`
    </select>
</mapper>